
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__StatusNotifierItem_proxy_hpp__proxy__H__
#define __sdbuscpp__StatusNotifierItem_proxy_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace kde {

class StatusNotifierItem_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.kde.StatusNotifierItem";

protected:
    StatusNotifierItem_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    StatusNotifierItem_proxy(const StatusNotifierItem_proxy&) = delete;
    StatusNotifierItem_proxy& operator=(const StatusNotifierItem_proxy&) = delete;
    StatusNotifierItem_proxy(StatusNotifierItem_proxy&&) = delete;
    StatusNotifierItem_proxy& operator=(StatusNotifierItem_proxy&&) = delete;

    ~StatusNotifierItem_proxy() = default;

    void registerProxy()
    {
        m_proxy.uponSignal("NewTitle").onInterface(INTERFACE_NAME).call([this](){ this->onNewTitle(); });
        m_proxy.uponSignal("NewIcon").onInterface(INTERFACE_NAME).call([this](){ this->onNewIcon(); });
        m_proxy.uponSignal("NewAttentionIcon").onInterface(INTERFACE_NAME).call([this](){ this->onNewAttentionIcon(); });
        m_proxy.uponSignal("NewOverlayIcon").onInterface(INTERFACE_NAME).call([this](){ this->onNewOverlayIcon(); });
        m_proxy.uponSignal("NewToolTip").onInterface(INTERFACE_NAME).call([this](){ this->onNewToolTip(); });
        m_proxy.uponSignal("NewStatus").onInterface(INTERFACE_NAME).call([this](const std::string& status){ this->onNewStatus(status); });
    }

    virtual void onNewTitle() = 0;
    virtual void onNewIcon() = 0;
    virtual void onNewAttentionIcon() = 0;
    virtual void onNewOverlayIcon() = 0;
    virtual void onNewToolTip() = 0;
    virtual void onNewStatus(const std::string& status) = 0;

public:
    void ContextMenu(const int32_t& x, const int32_t& y)
    {
        m_proxy.callMethod("ContextMenu").onInterface(INTERFACE_NAME).withArguments(x, y);
    }

    void Activate(const int32_t& x, const int32_t& y)
    {
        m_proxy.callMethod("Activate").onInterface(INTERFACE_NAME).withArguments(x, y);
    }

    void SecondaryActivate(const int32_t& x, const int32_t& y)
    {
        m_proxy.callMethod("SecondaryActivate").onInterface(INTERFACE_NAME).withArguments(x, y);
    }

    void Scroll(const int32_t& delta, const std::string& orientation)
    {
        m_proxy.callMethod("Scroll").onInterface(INTERFACE_NAME).withArguments(delta, orientation);
    }

public:
    std::string Category()
    {
        return m_proxy.getProperty("Category").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string Id()
    {
        return m_proxy.getProperty("Id").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string Title()
    {
        return m_proxy.getProperty("Title").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string Status()
    {
        return m_proxy.getProperty("Status").onInterface(INTERFACE_NAME).get<std::string>();
    }

    uint32_t WindowId()
    {
        return m_proxy.getProperty("WindowId").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    std::string IconThemePath()
    {
        return m_proxy.getProperty("IconThemePath").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string IconName()
    {
        return m_proxy.getProperty("IconName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>> IconPixmap()
    {
        return m_proxy.getProperty("IconPixmap").onInterface(INTERFACE_NAME).get<std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>>>();
    }

    std::string OverlayIconName()
    {
        return m_proxy.getProperty("OverlayIconName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>> OverlayIconPixmap()
    {
        return m_proxy.getProperty("OverlayIconPixmap").onInterface(INTERFACE_NAME).get<std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>>>();
    }

    std::string AttentionIconName()
    {
        return m_proxy.getProperty("AttentionIconName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>> AttentionIconPixmap()
    {
        return m_proxy.getProperty("AttentionIconPixmap").onInterface(INTERFACE_NAME).get<std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>>>();
    }

    std::string AttentionMovieName()
    {
        return m_proxy.getProperty("AttentionMovieName").onInterface(INTERFACE_NAME).get<std::string>();
    }

    sdbus::Struct<std::string, std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>>, std::string, std::string> ToolTip()
    {
        return m_proxy.getProperty("ToolTip").onInterface(INTERFACE_NAME).get<sdbus::Struct<std::string, std::vector<sdbus::Struct<int32_t, int32_t, std::vector<uint8_t>>>, std::string, std::string>>();
    }

    sdbus::ObjectPath Menu()
    {
        return m_proxy.getProperty("Menu").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    bool ItemIsMenu()
    {
        return m_proxy.getProperty("ItemIsMenu").onInterface(INTERFACE_NAME).get<bool>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}} // namespaces

#endif
