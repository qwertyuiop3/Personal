
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__StatusNotifierWatcher_proxy_hpp__proxy__H__
#define __sdbuscpp__StatusNotifierWatcher_proxy_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace kde {

class StatusNotifierWatcher_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.kde.StatusNotifierWatcher";

protected:
    StatusNotifierWatcher_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    StatusNotifierWatcher_proxy(const StatusNotifierWatcher_proxy&) = delete;
    StatusNotifierWatcher_proxy& operator=(const StatusNotifierWatcher_proxy&) = delete;
    StatusNotifierWatcher_proxy(StatusNotifierWatcher_proxy&&) = delete;
    StatusNotifierWatcher_proxy& operator=(StatusNotifierWatcher_proxy&&) = delete;

    ~StatusNotifierWatcher_proxy() = default;

    void registerProxy()
    {
        m_proxy.uponSignal("StatusNotifierItemRegistered").onInterface(INTERFACE_NAME).call([this](const std::string& service){ this->onStatusNotifierItemRegistered(service); });
        m_proxy.uponSignal("StatusNotifierItemUnregistered").onInterface(INTERFACE_NAME).call([this](const std::string& service){ this->onStatusNotifierItemUnregistered(service); });
        m_proxy.uponSignal("StatusNotifierHostRegistered").onInterface(INTERFACE_NAME).call([this](){ this->onStatusNotifierHostRegistered(); });
        m_proxy.uponSignal("StatusNotifierHostUnregistered").onInterface(INTERFACE_NAME).call([this](){ this->onStatusNotifierHostUnregistered(); });
    }

    virtual void onStatusNotifierItemRegistered(const std::string& service) = 0;
    virtual void onStatusNotifierItemUnregistered(const std::string& service) = 0;
    virtual void onStatusNotifierHostRegistered() = 0;
    virtual void onStatusNotifierHostUnregistered() = 0;

public:
    void RegisterStatusNotifierItem(const std::string& service)
    {
        m_proxy.callMethod("RegisterStatusNotifierItem").onInterface(INTERFACE_NAME).withArguments(service);
    }

    void RegisterStatusNotifierHost(const std::string& service)
    {
        m_proxy.callMethod("RegisterStatusNotifierHost").onInterface(INTERFACE_NAME).withArguments(service);
    }

public:
    int32_t ProtocolVersion()
    {
        return m_proxy.getProperty("ProtocolVersion").onInterface(INTERFACE_NAME).get<int32_t>();
    }

    std::vector<std::string> RegisteredStatusNotifierItems()
    {
        return m_proxy.getProperty("RegisteredStatusNotifierItems").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

    bool IsStatusNotifierHostRegistered()
    {
        return m_proxy.getProperty("IsStatusNotifierHostRegistered").onInterface(INTERFACE_NAME).get<bool>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}} // namespaces

#endif
