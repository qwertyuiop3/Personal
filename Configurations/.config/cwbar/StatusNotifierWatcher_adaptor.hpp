
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__StatusNotifierWatcher_adaptor_hpp__adaptor__H__
#define __sdbuscpp__StatusNotifierWatcher_adaptor_hpp__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace kde {

class StatusNotifierWatcher_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.kde.StatusNotifierWatcher";

protected:
    StatusNotifierWatcher_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    StatusNotifierWatcher_adaptor(const StatusNotifierWatcher_adaptor&) = delete;
    StatusNotifierWatcher_adaptor& operator=(const StatusNotifierWatcher_adaptor&) = delete;
    StatusNotifierWatcher_adaptor(StatusNotifierWatcher_adaptor&&) = delete;
    StatusNotifierWatcher_adaptor& operator=(StatusNotifierWatcher_adaptor&&) = delete;

    ~StatusNotifierWatcher_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable( sdbus::registerMethod("RegisterStatusNotifierItem").withInputParamNames("service").implementedAs([this](const std::string& service){ return this->RegisterStatusNotifierItem(service); })
                          , sdbus::registerMethod("RegisterStatusNotifierHost").withInputParamNames("service").implementedAs([this](const std::string& service){ return this->RegisterStatusNotifierHost(service); })
                          , sdbus::registerSignal("StatusNotifierItemRegistered").withParameters<std::string>("service")
                          , sdbus::registerSignal("StatusNotifierItemUnregistered").withParameters<std::string>("service")
                          , sdbus::registerSignal("StatusNotifierHostRegistered")
                          , sdbus::registerSignal("StatusNotifierHostUnregistered")
                          , sdbus::registerProperty("ProtocolVersion").withGetter([this](){ return this->ProtocolVersion(); })
                          , sdbus::registerProperty("RegisteredStatusNotifierItems").withGetter([this](){ return this->RegisteredStatusNotifierItems(); })
                          , sdbus::registerProperty("IsStatusNotifierHostRegistered").withGetter([this](){ return this->IsStatusNotifierHostRegistered(); })
                          ).forInterface(INTERFACE_NAME);
    }

public:
    void emitStatusNotifierItemRegistered(const std::string& service)
    {
        m_object.emitSignal("StatusNotifierItemRegistered").onInterface(INTERFACE_NAME).withArguments(service);
    }

    void emitStatusNotifierItemUnregistered(const std::string& service)
    {
        m_object.emitSignal("StatusNotifierItemUnregistered").onInterface(INTERFACE_NAME).withArguments(service);
    }

    void emitStatusNotifierHostRegistered()
    {
        m_object.emitSignal("StatusNotifierHostRegistered").onInterface(INTERFACE_NAME);
    }

    void emitStatusNotifierHostUnregistered()
    {
        m_object.emitSignal("StatusNotifierHostUnregistered").onInterface(INTERFACE_NAME);
    }

private:
    virtual void RegisterStatusNotifierItem(const std::string& service) = 0;
    virtual void RegisterStatusNotifierHost(const std::string& service) = 0;

private:
    virtual int32_t ProtocolVersion() = 0;
    virtual std::vector<std::string> RegisteredStatusNotifierItems() = 0;
    virtual bool IsStatusNotifierHostRegistered() = 0;

private:
    sdbus::IObject& m_object;
};

}} // namespaces

#endif
